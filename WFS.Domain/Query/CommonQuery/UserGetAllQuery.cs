//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WFS.Domain.Query
{
    using System;
    using WFS.Domain;
    using System.Linq;
    using System.Text;
    using WFS.Domain.Query;
    using System.Data;
    using System.Xml;
    using WFS.Db;
    using Entities.Models;
    using WFS.Entities.Enumerations;
    using AutoMapper;
    using System.Threading.Tasks;
    using System.Collections.Generic;

    public class UserGetAllQuery : IQuery<IList<WFS.Entities.Models.User>>
    {

    }

    public class UserGetAllQueryHandler : IQueryHandler<UserGetAllQuery, IList<WFS.Entities.Models.User>>
    {
        private readonly DbEntities _db;
        public UserGetAllQueryHandler()
        {
            _db = new DbEntities();
        }


        public IList<WFS.Entities.Models.User> Handler(UserGetAllQuery query)
        {
            try
            {
                var result = _db.User.Include("CommonUserType").Include("User2").Include("User3").Include("Note").Where(x => x.IsDeleted == false).AsEnumerable().ToList();
                Mapper.CreateMap<WFS.Db.CommonUserType, WFS.Entities.Models.CommonUserType>();
                Mapper.CreateMap<WFS.Db.User, WFS.Entities.Models.User>();
                Mapper.CreateMap<WFS.Db.Note, WFS.Entities.Models.Note>();
                Mapper.CreateMap<WFS.Db.User, WFS.Entities.Models.User>().ForMember(c => c.CommonUserType, d => d.MapFrom(s => s.CommonUserType)).ForMember(c => c.User2, d => d.MapFrom(s => s.User2)).ForMember(c => c.User3, d => d.MapFrom(s => s.User3));
                return Mapper.Map<IEnumerable<WFS.Db.User>, IEnumerable<WFS.Entities.Models.User>>(result).ToList();

            }
            catch (Exception ex)
            {
                throw new ExceptionLog(LogType.DATABASE_SELECT, LogLevel.ERROR, ex, "GetAllQueryHandler");
            }
        }
    }

}
