//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WFS.Service.Services
{
    using System;
    using SimpleInjector;
    using WFS.Domain;
    using System.Linq;
    using System.Text;
    using WFS.Domain.Query;
    using System.Data;
    using System.Xml;
    using WFS.Entities.Models;
    using WFS.Entities.Enumerations;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    using Entities.Contracts;

    public class NoteService
    {
        private readonly Container _container;
        public NoteService(Container container)
        {
            _container = container;
        }


        public ServiceResult<Note> Add(Note obj)
        {
            try
            {

                IMediator service = _container.GetInstance<IMediator>();
                var query = new NoteAddQuery();
                query.Note = obj;
                return new ServiceResult<Note>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<Note>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }

        public ServiceResult<Note> Edit(Note obj)
        {
            try
            {
                IMediator service = _container.GetInstance<IMediator>();
                var query = new NoteEditQuery();
                query.Note = obj;
                return new ServiceResult<Note>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<Note>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }
        public ServiceResult<Note> Retrieve(int Id)
        {
            try
            {
                IMediator service = _container.GetInstance<IMediator>();
                var query = new NoteRetrieveQuery { Id = Id };
                return new ServiceResult<Note>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<Note>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }
        public ServiceResult<IList<Note>> GetAll()
        {
            try
            {
                IMediator service = _container.GetInstance<IMediator>();
                var query = new NoteGetAllQuery();
                return new ServiceResult<IList<Note>>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<IList<Note>>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }

        public ServiceResult<IList<Note>> GetAll(string Option)
        {
            try
            {
                IMediator service = _container.GetInstance<IMediator>();
                var query = new NoteGetAllQuerybyOption { Option = Option }; ;
                return new ServiceResult<IList<Note>>(service.Proccess(query), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<IList<Note>>(result: null, message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }
        public ServiceResult<string> Delete(int Id)
        {
            try
            {
                IMediator service = _container.GetInstance<IMediator>();
                var query = new NoteDeleteQuery { Id = Id };
                return new ServiceResult<string>(service.Proccess(query).ToString(), message: ClientErrorMessage.Success(), state: ServiceResultStates.SUCCESS);
            }
            catch (ExceptionLog ex)
            {
                LoggerService.Logger.Log(_container, ex);
                return new ServiceResult<string>(result: "false", message: ClientErrorMessage.Error(), state: ServiceResultStates.ERROR);
            }
        }
    }
}
